// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetBanking.Infrastructure.Persistence.Contexts;

namespace NetBanking.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.BankProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankProducts");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("IdProducType")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("Identifier")
                        .HasColumnType("int");

                    b.Property<double>("Limit")
                        .HasColumnType("float");

                    b.Property<int>("MainProduct")
                        .HasColumnType("int");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdProducType");

                    b.HasIndex("IdUser");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Recipients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdRecipient")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdRecipient");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRecipientProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdUserProduct")
                        .HasColumnType("int");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdRecipientProduct");

                    b.HasIndex("IdUserProduct");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Products", b =>
                {
                    b.HasOne("NetBanking.Core.Domain.Entities.BankProducts", "Produc")
                        .WithMany("Products")
                        .HasForeignKey("IdProducType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetBanking.Core.Domain.Entities.Users", "User")
                        .WithMany("Products")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Produc");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Recipients", b =>
                {
                    b.HasOne("NetBanking.Core.Domain.Entities.Users", "Recipient")
                        .WithMany("Recipients")
                        .HasForeignKey("IdRecipient")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Transactions", b =>
                {
                    b.HasOne("NetBanking.Core.Domain.Entities.Products", "ProducTo")
                        .WithMany("TransactionsIn")
                        .HasForeignKey("IdRecipientProduct")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NetBanking.Core.Domain.Entities.Products", "ProductFrom")
                        .WithMany("TransactionsOut")
                        .HasForeignKey("IdUserProduct")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductFrom");

                    b.Navigation("ProducTo");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.BankProducts", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Products", b =>
                {
                    b.Navigation("TransactionsIn");

                    b.Navigation("TransactionsOut");
                });

            modelBuilder.Entity("NetBanking.Core.Domain.Entities.Users", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Recipients");
                });
#pragma warning restore 612, 618
        }
    }
}
